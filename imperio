#!/usr/bin/env bash

###############################################################################
# ERROR: Let the user know if the script fails
###############################################################################

trap 'ret=$?; test $ret -ne 0 && printf "\n   \e[31m\033[0m  Formation failed  \e[31m\033[0m\n" >&2; exit $ret' EXIT

set -e

###############################################################################
# CHECK FOR FUNCTIONS: Check for required functions file
###############################################################################

if [ -e functions ]; then
	cd "$(dirname "${BASH_SOURCE[0]}")" \
		&& . "functions"
else
	printf "\n ⚠️  ./functions not found\n"
	exit 1
fi

###############################################################################
# CHECK: Bash version
###############################################################################

check_bash_version

###############################################################################
# Welcome Message          http://patorjk.com/software/taag/ ( font: Script )
###############################################################################

printf "
         _________ _______  _______  _______  ______   _______          
|\     /|\__   __// ___   )(  ___  )(  ____ )(  __  \ (  ____ )|\     /|
| )   ( |   ) (   \/   )  || (   ) || (    )|| (  \  )| (    )|( \   / )
| | _ | |   | |       /   )| (___) || (____)|| |   ) || (____)| \ (_) / 
| |( )| |   | |      /   / |  ___  ||     __)| |   | ||     __)  \   /  
| || || |   | |     /   /  | (   ) || (\ (   | |   ) || (\ (      ) (   
| () () |___) (___ /   (_/\| )   ( || ) \ \__| (__/  )| ) \ \__   | |   
(_______)\_______/(_______/|/     \||/   \__/(______/ |/   \__/   \_/   

╭─────────────────────────────────────────────────────╮
│  A great and powerful script for configuring macOS  │
│  (Forked from ${bold}github.com/minamarkham/formation${reset})     │
│─────────────────────────────────────────────────────│
│  Safe to run multiple times on the same machine.    │
│  It ${green}installs${reset}, ${blue}upgrades${reset}, or ${yellow}skips${reset} packages based     │
│  on what is already installed on the machine.       │
╰─────────────────────────────────────────────────────╯
   ${dim}$(get_os) $(get_os_version) ${normal} // ${dim}$BASH ${normal} // ${dim}$BASH_VERSION${reset}
"

###############################################################################
# CHECK: Internet
###############################################################################
chapter "Checking internet connection…"
check_internet_connection

###############################################################################
# PROMPT: Password
###############################################################################
chapter "Caching password…"
ask_for_sudo

###############################################################################
# PROMPT: SSH Key
###############################################################################
chapter 'Checking for SSH key…'
ssh_key_setup

###############################################################################
# INSTALL: Dependencies
###############################################################################
chapter "Installing Dependencies…"

# -----------------------------------------------------------------------------
# XCode
# -----------------------------------------------------------------------------
if type xcode-select >/dev/null 2>&1 && xpath=$( xcode-select --print-path ) &&
	test -d "${xpath}" && test -x "${xpath}" ; then
	print_success_muted "Xcode already installed. Skipping."
else
	step "Installing Xcode…"
	xcode-select --install
	print_success "Xcode installed!"
fi

if [ ! -d "$HOME/.bin/" ]; then
	mkdir "$HOME/.bin"
fi

# -----------------------------------------------------------------------------
# NVM
# -----------------------------------------------------------------------------
if ! [ -x nvm ]; then
	step "Installing NVM…"
	curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
	print_success "NVM installed!"
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
	step "Installing latest Node…"
	nvm install node
	nvm use node
	nvm run node --version
	nodev=$(node -v)
	print_success "Using Node $nodev!"
else
	print_success_muted "NVM/Node already installed. Skipping."
fi

# -----------------------------------------------------------------------------
# Homebrew
# -----------------------------------------------------------------------------
if ! [ -x "$(command -v brew)" ]; then
	step "Installing Homebrew…"
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  case $(uname -m) in
    'arm64')
      homebrew_path='/opt/homebrew'
      ;;
    'x86_64')
      homebrew_path='/usr/local'
      ;;
    *)
      echo 'An error occurred parsing system architecture'
      ;;
  esac

  # NOTE this code has not been tested thoroughly, but it intends to paramaterize
  # the homebrew path so as to enable dynamic installation on either arm or x86 systems

  (echo; echo "eval \"\$(\$homebrew_path/bin/brew shellenv)\"") >> $HOME/.zprofile
  eval "\$(\$homebrew_path/bin/brew shellenv)"

	print_success "Homebrew installed!"
else
	print_success_muted "Homebrew already installed. Skipping."
fi

if brew list | grep -Fq brew-cask; then
	step "Uninstalling old Homebrew-Cask…"
	brew uninstall --force brew-cask
	print_success "Homebrew-Cask uninstalled!"
fi

###############################################################################
# INSTALL: brews
###############################################################################
if [ -e $cwd/installs/brews ]; then
	chapter "Installing Homebrew formulae…"


	for brew in $(<$cwd/installs/brews); do
		install_brews $brew
	done
fi

###############################################################################
# UPDATE: Homebrew
###############################################################################
chapter "Updating Homebrew formulae…"
brew update

###############################################################################
# INSTALL: casks
###############################################################################
if [ -e $cwd/installs/casks ]; then
	chapter "Installing apps via Homebrew…"

  brew tap homebrew/cask-fonts


	for cask in $(<$cwd/installs/casks); do
	    install_application_via_brew $cask
	done
fi

###############################################################################
# INSTALL: Mac App Store Apps
###############################################################################
chapter "Installing apps from App Store…"
if [ -x mas ]; then

	print_warning "Please install mas-cli first: brew mas. Skipping."

	else

	if [ -e $cwd/installs/apps ]; then
    # The account command is not supported as of macOS 12, skip that check
    # https://github.com/mas-cli/mas#known-issues

		# Workaround for associative array in Bash 3
		# https://stackoverflow.com/questions/6047648/bash-4-associative-arrays-error-declare-a-invalid-option
		for app in $(<$cwd/installs/apps); do
			KEY="${app%%::*}"
			VALUE="${app##*::}"
			install_application_via_app_store $KEY $VALUE
		done
	fi

fi

###############################################################################
# CLEAN: Homebrew files
###############################################################################
chapter "Cleaning up Homebrew files…"
brew cleanup 2> /dev/null

###############################################################################
# INSTALL: npm packages
###############################################################################
if [ -e $cwd/installs/npm ]; then
	chapter "Installing npm packages…"

	for pkg in $(<$cwd/installs/npm); do
		KEY="${pkg%%::*}"
		VALUE="${pkg##*::}"
		install_npm_packages $KEY $VALUE
	done
fi


###############################################################################
# OPTIONAL: Customizations
###############################################################################
chapter "Running customizations…"

if [ -f "$cwd/customizations" ]; then
	. "$cwd/customizations"; printf "\n  Performing customizations…";
else
	print_warning "No customizations found. Skipping."
fi

###############################################################################
# NOTIFY COMPLETED
###############################################################################
completed
